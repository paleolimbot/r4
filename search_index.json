[
["index.html", "R in the CWRS Introduction", " R in the CWRS The R Programming Group at the CWRS 2017-07-18 Introduction TODO: write this section This course material was written using the bookdown package inside RStudio. Pages were generated using pandoc and gitbook. The source is available on github. "],
["filtering-subsetting-and-summarising-using-dplyr.html", "Chapter 1 Filtering, Subsetting, and Summarising using dplyr 1.1 Prerequisites 1.2 Viewing a Data Frame 1.3 Selecting Columns 1.4 Filtering Rows 1.5 Selecting and Filtering 1.6 The Pipe (%&gt;%) 1.7 Summary", " Chapter 1 Filtering, Subsetting, and Summarising using dplyr 1.1 Prerequisites The prerequisites for this tutorial are tidyverse and rclimateca. If these packages aren’t installed, you’ll have to install them using install.packages(). install.packages(&quot;tidyverse&quot;) install.packages(&quot;rclimateca&quot;) Load the packages when you’re done! If there are errors, you may have not installed the above packages correctly! library(tidyverse) ## Loading tidyverse: ggplot2 ## Loading tidyverse: tibble ## Loading tidyverse: tidyr ## Loading tidyverse: readr ## Loading tidyverse: purrr ## Loading tidyverse: dplyr ## Conflicts with tidy packages ---------------------------------------------- ## filter(): dplyr, stats ## lag(): dplyr, stats library(rclimateca) Finally, you will need to obtain the sample data using the getClimateData() function in the rclimateca package. Copy/paste the statement below to load the sample data for this tutorial. climate_data &lt;- getClimateData(c(27141, 6354), nicenames = TRUE) ## | | | 0% | |================================ | 50% | |=================================================================| 100% 1.2 Viewing a Data Frame In RStudio’s “Environment” tab (usually at the top right of the screen), you should see a variable called climate_data in the list. You can inspect it by clicking on the variable name, after which a tab will appear displaying the contents of the variable you just loaded. Clicking the little arrow to the left of the name will display the structure of the data frame, including the column names and some sample values. You can also do both of these things using the R commands View() and str(), respectively. Also useful is the head() function, which will display the first few rows of a data frame. View(climate_data) # will display a graphic table browser str(climate_data) # will display a text summary of the object ## &#39;data.frame&#39;: 997 obs. of 27 variables: ## $ stationid : num 27141 27141 27141 27141 27141 ... ## $ datetime : chr &quot;1996-07&quot; &quot;1996-08&quot; &quot;1996-09&quot; &quot;1996-10&quot; ... ## $ year : int 1996 1996 1996 1996 1996 1996 1997 1997 1997 1997 ... ## $ month : int 7 8 9 10 11 12 1 2 3 4 ... ## $ meanmaxtemp : num 23.8 24.8 18.8 12.3 6.1 4.8 -0.8 -0.2 1.1 7.1 ... ## $ meanmaxtempflag : chr &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ meanmintemp : num 14.4 13.8 11.3 3.7 0 -1.9 -9.5 -8.4 -6.9 -1.2 ... ## $ meanmintempflag : chr &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ meantemp : num 19.1 19.4 15.1 8 3 1.5 -5.2 -4.3 -2.9 2.9 ... ## $ meantempflag : chr &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ extrmaxtemp : num 29.6 31.6 27.6 20.4 19 15.5 10.9 10.6 10 14.4 ... ## $ extrmaxtempflag : chr &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ extrmintemp : num 10.7 8.5 3.7 -1.7 -8.7 -15.7 -20.9 -17.1 -17 -11.7 ... ## $ extrmintempflag : chr &quot;S&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ totalrain : num NA NA NA NA NA NA NA NA NA NA ... ## $ totalrainflag : chr NA NA NA NA ... ## $ totalsnow : num NA NA NA NA NA NA NA NA NA NA ... ## $ totalsnowflag : chr NA NA NA NA ... ## $ totalprecip : num 147.5 24.4 260.7 95.5 91.3 ... ## $ totalprecipflag : chr &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ snowgrndlastday : int 0 0 0 0 NA 0 2 4 11 0 ... ## $ snowgrndlastdayflag: chr &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ dirofmaxgust : int NA NA NA NA NA NA NA NA NA NA ... ## $ dirofmaxgustflag : chr NA NA NA NA ... ## $ spdofmaxgust : chr NA NA NA NA ... ## $ spdofmaxgustflag : chr NA NA NA NA ... ## $ parseddate : Date, format: &quot;1996-07-01&quot; &quot;1996-08-01&quot; ... head(climate_data) ## # A tibble: 6 x 27 ## stationid datetime year month meanmaxtemp meanmaxtempflag meanmintemp ## * &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 27141 1996-07 1996 7 23.8 14.4 ## 2 27141 1996-08 1996 8 24.8 13.8 ## 3 27141 1996-09 1996 9 18.8 11.3 ## 4 27141 1996-10 1996 10 12.3 3.7 ## 5 27141 1996-11 1996 11 6.1 0.0 ## 6 27141 1996-12 1996 12 4.8 -1.9 ## # ... with 20 more variables: meanmintempflag &lt;chr&gt;, meantemp &lt;dbl&gt;, ## # meantempflag &lt;chr&gt;, extrmaxtemp &lt;dbl&gt;, extrmaxtempflag &lt;chr&gt;, ## # extrmintemp &lt;dbl&gt;, extrmintempflag &lt;chr&gt;, totalrain &lt;dbl&gt;, ## # totalrainflag &lt;chr&gt;, totalsnow &lt;dbl&gt;, totalsnowflag &lt;chr&gt;, ## # totalprecip &lt;dbl&gt;, totalprecipflag &lt;chr&gt;, snowgrndlastday &lt;int&gt;, ## # snowgrndlastdayflag &lt;chr&gt;, dirofmaxgust &lt;int&gt;, dirofmaxgustflag &lt;chr&gt;, ## # spdofmaxgust &lt;chr&gt;, spdofmaxgustflag &lt;chr&gt;, parseddate &lt;date&gt; It’s worth mentioning a little bit about what this data frame contains, since we’ll be working with it for the rest of this tutorial. Each row contains a number of parameters that are available on a monthly basis from two Environment Canada climate stations (Kentville Agricultural Research Station is 27141; Greenwood Station is 6354). The stationid column identifies where the values were measured, the year and month column identify when the values were measured, and the rest of the columns contain the measured values. For each measured value column, there is a flag column that gives additional information about the measurement (for the most part, we will ignore these columns). The only column names that are slightly cryptic are extrmaxtemp and extrmintemp, which are the extreme maximum and minimum temperatures measured in that month, respectively. 1.3 Selecting Columns One way to subset climate_data is to subset by column, for which we will use the select() function. For example, we may only be interested in the mean temperature information, represented by the columns stationid, year, month, and meantemp. mean_temp_data &lt;- select(climate_data, stationid, year, month, meantemp) The first argument to the select() function is the original data frame (in this case, climate_data), and the remaining arguments are the names of the columns to be selected. To select the stationid, year, month, meantemp and totalprecip columns, you would use the following R command: temp_precip_data &lt;- select(climate_data, stationid, year, month, meantemp, totalprecip) 1.3.1 Excercises Use View(), str(), and head() to preview the two data frames we just created. Do they have the columns you would expect? Use select() to select stationid, year, month, and all of the columns containing temperature values, and assign it to the variable temp_data. 1.4 Filtering Rows Another way to subset climate_data is by filtering rows using column values, similar to the filter feature in Microsoft Excel. This is done using the filter() function. For example, we may only be interested in July temperature for the two stations. july_data &lt;- filter(climate_data, month == 7) Just like select(), the first argument to filter() is the original data frame, and the subsequent arguments are the conditions that each row must satisfy in order to be included in the output. Column values are referred to by the column name (in the above example, month), so to include all rows where the value in the month column is 7, we use month == 7. Passing multiple conditions means each row must satisfy all of the conditions, such that to obtain the data for July of 1999, we can use the following call to filter(): july_1999_data &lt;- filter(climate_data, month == 7, year == 1999) It is very important that there are two equals signs within filter()! The == operator tests for equality (e.g. (2 + 2) == 4), whereas the = operator assigns a value or passes a named argument to a function, which is not what you’re trying to do within filter(). Other common operators that are useful within filter are != (not equal to), &gt; (greater than), &lt; (less than), &gt;= (greater than or equal to), &lt;= (less than or equal to), and %in% (tests if the value is one of several values). Using these, we could find out which observations had mean temperatures that were below freezing: freezing_observations &lt;- filter(climate_data, meantemp &lt; 0) We could also find which observations occurred during the summer months (May, June, July, or August): summer_data &lt;- filter(climate_data, month %in% c(5, 6, 7, 8)) 1.4.1 Exercises Use View(), str(), and head() to preview the data frames we just created. Do they have the rows you would expect? Use filter() to find observations from the month of December where the mean temperature was above freezing. Are there any observations from the month of January where the mean temperature was below freezing? Filter climate_data to include only observations from the months of December, January, February, and March and assign it to a variable name of your choosing. 1.5 Selecting and Filtering Often we need to use both select() and filter() to obtain the desired subset of a data frame. To do this, we need to pass the result of select() to filter(), or the result of filter() to select. For example, we could create a data frame of mean temperature observations from the month of July one of two ways (you’ll recall that we selected temperature columns in the data frame mean_temp_data, and we filtered for the month of July in the data frame july_data): july_temp &lt;- filter(mean_temp_data, month == 7) july_temp2 &lt;- select(july_data, stationid, year, month, meantemp) 1.5.1 Exercises Inspect july_temp and july_temp2 using View(), str(), and head(). Are they identical? Create a data frame of July total precipitation data and give it a variable name of your choosing. Do this by using select() followed by filter(), then using filter() followed by select(). Inspect the output to ensure the data frames are identical. 1.6 The Pipe (%&gt;%) There is an easier way! Instead of creating intermediary variables every time we want to subset a data frame using select() and filter(), we can use the pipe operator (%&gt;%) to pass the result of one function call to another. Thus, creating our july_temp data frame from above becomes one line with one variable assignment instead of two. july_temp3 &lt;- climate_data %&gt;% filter(month == 7) %&gt;% select(stationid, year, month, meantemp) What %&gt;% does is pass the left side into the first argument of the function call on the right side. Thus, filter(climate_data, month == 7) becomes climate_data %&gt;% filter(month ==7). When using the tidyverse family of packages, you should use the pipe as often as possible! It usually makes for more readable, less error-prone code, and reduces the number of temporary variables you create that clutter up your workspace. When using filter() and select() with other tidyverse manipulations like arrange(), group_by(), summarise(), and mutate(), the pipe becomes indispensable. 1.6.1 Exercises Inspect july_temp3 to ensure it is identical to july_temp. Create a data frame of July total precipitation data using climate_data, filter(), select(), and %&gt;%. Is it identical to the data frame you created in the exercise above? 1.7 Summary In this tutorial we introduced the use of select(), filter() and the pipe (%&gt;%). These functions are the building blocks of powerful tools in the tidyverse such as group_by(), summarise(), arrange(), mutate() and many others. "],
["using-rstudio-projects.html", "Chapter 2 Using RStudio Projects 2.1 Prerequisites 2.2 Projects 2.3 Creating a new project 2.4 Organizing a project 2.5 Why use a project? 2.6 Summary", " Chapter 2 Using RStudio Projects Even if you know how to code in R, you will still need a strategy of how to organize your data, code, and output to take advantage of all the things R and RStudio have to offer. This tutorial suggests one way of doing this, with the take home message that you should stay organized! 2.1 Prerequisites The only prerequisite for this tutorial is RStudio. This tutorial draws heavily on the Projects chapter and the Scripts chapter in R for Data Science by Hadley Wickham. 2.2 Projects Projects are a notion in RStudio that let you keep a set of related data and scripts organized in a single directory. R scripts are rarely useful without data files, and data files are rarely useful on their own when using R for data analyis. Furthermore, the figures and tables you generate using R are only replicable if you know which script created them! An RStudio project lets you keep your data, scripts, and output in the same working directory, so that it is easy to refer to your data from your files, and easy to know which scripts generated your analysis. 2.3 Creating a new project To create a new project, chose New project… from the File menu, or click on the little RStudio icon in the upper right side of your screen to open the New project dialog. The project menu in RStudio is located in the upper right corner of the screen. When you have created more projects, you can easily switch between them here. This will direct you to a dialog that gives you some options about how to create your RStudio project. If you already have a folder that contains your scripts and/or data, you can use the Existing Directory option to turn that directory into a project. To create a brand new directory that is an RStudio project, choose the New Directory option. This will give you another menu, from which you’ll want to choose Empty Project. This will give you a window with a few options about where to create your project. Creating an RStudio project requires a directory name and a place where that directory lives. Name the project something descriptive and put it somwhere you can find it! The Desktop is not a bad place to start (you can move projects around after you’ve created them). 2.4 Organizing a project Most projects have at least three components: data, scripts, and output (once you get to using R Markdown you might have a fourth, documents). A well-organized project has defined places where these things live. I tend to put raw data (data that I have never touched, which usually means it is from an instrument or the internet or from somebody else’s spreadsheet) in a folder called raw_data/, and cleaned data in a folder called data/. Scripts (.R files) can live in a folder called scripts/, and output can live in a folder called output/ or figures/. R Markdown files (documents) need to live in the main project directory for a very good reason that you will learn when we get to using R Markdown. The point is not that you need to or should have specific folders, but that it is clear to you and others where to look for the various components of your project. A directory structure for a recent project collecting Halifax Water DOC measurements. The raw data folder contains an excel sheet from Halifax Water, and the clean_data.R script reads the excel sheet and generates halifax_wq.csv, which is read by all the scripts that do analysis and generate figures within the project. 2.5 Why use a project? The main advantage of using a project is that the working directory when you open one is automatically set to the directory of the project. This means that you never have to call setwd(), since your data always lives fairly close to your R script. In the above example of a recent RStudio project, hw_toc_plot.R reads in halifax_wq.csv using the command read_csv(&quot;data/halifax_wq.csv&quot;). No matter where the project lives on the computer (or indeed, whose computer the project lives on), this script can remain unchanged. This gives you the freedom to move the project folder about your computer, or to have it live somewhere like Dropbox or GitHub such that the project can be shared with others. 2.6 Summary This tutorial suggested one method of organizing R scripts and data to leverage the full potential of R and RStudio. Projects are an easy way to collect data, scripts, and output together in the same folder so that output can be replicated and analysis in scripts can be easily regenerated by yourself and others. "]
]
